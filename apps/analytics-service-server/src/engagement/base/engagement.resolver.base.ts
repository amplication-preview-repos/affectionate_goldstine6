/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Engagement } from "./Engagement";
import { EngagementCountArgs } from "./EngagementCountArgs";
import { EngagementFindManyArgs } from "./EngagementFindManyArgs";
import { EngagementFindUniqueArgs } from "./EngagementFindUniqueArgs";
import { CreateEngagementArgs } from "./CreateEngagementArgs";
import { UpdateEngagementArgs } from "./UpdateEngagementArgs";
import { DeleteEngagementArgs } from "./DeleteEngagementArgs";
import { EngagementService } from "../engagement.service";
@graphql.Resolver(() => Engagement)
export class EngagementResolverBase {
  constructor(protected readonly service: EngagementService) {}

  async _engagementsMeta(
    @graphql.Args() args: EngagementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Engagement])
  async engagements(
    @graphql.Args() args: EngagementFindManyArgs
  ): Promise<Engagement[]> {
    return this.service.engagements(args);
  }

  @graphql.Query(() => Engagement, { nullable: true })
  async engagement(
    @graphql.Args() args: EngagementFindUniqueArgs
  ): Promise<Engagement | null> {
    const result = await this.service.engagement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Engagement)
  async createEngagement(
    @graphql.Args() args: CreateEngagementArgs
  ): Promise<Engagement> {
    return await this.service.createEngagement({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Engagement)
  async updateEngagement(
    @graphql.Args() args: UpdateEngagementArgs
  ): Promise<Engagement | null> {
    try {
      return await this.service.updateEngagement({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Engagement)
  async deleteEngagement(
    @graphql.Args() args: DeleteEngagementArgs
  ): Promise<Engagement | null> {
    try {
      return await this.service.deleteEngagement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
