/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Engagement as PrismaEngagement } from "@prisma/client";

export class EngagementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EngagementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.engagement.count(args);
  }

  async engagements(
    args: Prisma.EngagementFindManyArgs
  ): Promise<PrismaEngagement[]> {
    return this.prisma.engagement.findMany(args);
  }
  async engagement(
    args: Prisma.EngagementFindUniqueArgs
  ): Promise<PrismaEngagement | null> {
    return this.prisma.engagement.findUnique(args);
  }
  async createEngagement(
    args: Prisma.EngagementCreateArgs
  ): Promise<PrismaEngagement> {
    return this.prisma.engagement.create(args);
  }
  async updateEngagement(
    args: Prisma.EngagementUpdateArgs
  ): Promise<PrismaEngagement> {
    return this.prisma.engagement.update(args);
  }
  async deleteEngagement(
    args: Prisma.EngagementDeleteArgs
  ): Promise<PrismaEngagement> {
    return this.prisma.engagement.delete(args);
  }
}
